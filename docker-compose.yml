version: "3.9"

services:
  # ============ DATABASE ============
  db:
    image: postgres:15
    container_name: ml_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ml_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============ REDIS CACHE ============
  redis:
    image: redis:7-alpine
    container_name: ml_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============ DATABASE ADMIN ============
  pgadmin:
    image: dpage/pgadmin4
    container_name: ml_pgadmin
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - db

  # ============ MONITORING ============
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@db:5432/ml_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db

  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis

  # ============ MAIN BACKEND ============
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ml_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ============ AI SERVICES ============
  optimizer_ai:
    build:
      context: ./optimizer_ai
      dockerfile: Dockerfile
    container_name: ml_optimizer_ai
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  strategic_mode:
    build:
      context: ./strategic_mode_service
      dockerfile: Dockerfile
    container_name: ml_strategic_mode
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  # ============ AUTOMATION SERVICES ============
  campaign_automation:
    build:
      context: ./campaign_automation_service
      dockerfile: Dockerfile
    container_name: ml_campaign_automation
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  discount_scheduler:
    build:
      context: ./discount_campaign_scheduler
      dockerfile: Dockerfile
    container_name: ml_discount_scheduler
    ports:
      - "8004:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  # ============ LEARNING & GAMIFICATION ============
  learning_service:
    build:
      context: ./learning_service
      dockerfile: Dockerfile
    container_name: ml_learning_service
    ports:
      - "8005:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  gamification:
    build:
      context: ./gamification_service
      dockerfile: Dockerfile
    container_name: ml_gamification
    ports:
      - "8006:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
      - redis
    restart: unless-stopped

  # ============ FRONTEND ============
  frontend:
    build:
      context: ./frontend-vite
      dockerfile: Dockerfile
    container_name: ml_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - NODE_ENV=development
    depends_on:
      - backend
    restart: unless-stopped

  # ============ WORKER QUEUE ============
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ml_celery_worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - db
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ml_celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - db
    restart: unless-stopped

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: ml_network
